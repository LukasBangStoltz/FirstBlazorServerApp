
@typeparam TItem

<table class="table is-fullwidth">
    <thead>
        <tr>
            @if (Columns == null || Columns.Count <=0)
            {
                
            }
            else
            {
                foreach(var column in Columns)
                {
                    @if (column.Alignment != Alignment.NotSet)
                    {
                        switch (column.Alignment)
                        {
                            case Alignment.Left:
                            <th class="align-left">@column.Caption</th>    
                            break;

                            case Alignment.Center:
                            //th align center
                                <th class="align-center">@column.Caption</th>

                                break;

                            case Alignment.Right:
                            //th align right
                                <th class="align-right">@column.Caption</th>

                                break;
                            default:
                                break;
                        }


                    }
                    else
                    {
                        <th>@column.Caption</th>
                    }
                }            
            }
        </tr>
    </thead>
    <tbody>
        @foreach(var item in DataItems.Skip(Paging.NumberOfItemsToSkip(CurrentPageNumber)).Take(Paging.NumberOfItemsToTake(DataItems.Count)))
        {
            <tr>
                @foreach(var column in Columns)
                {
                    @if (!string.IsNullOrWhiteSpace(column.Format) && column.DataType != DataType.NotSet)
                    {
                        string value = string.Empty;
                        switch (column.DataType)
                        {
                            
                            case DataType.Date:
                            case DataType.DateTime:
                                value = DateTime.Parse(typeof(TItem).GetProperty(column.DataField).GetValue(item).ToString()).ToString(column.Format);
                                break;
                            case DataType.Boolean:
                                bool.Parse(typeof(TItem).GetProperty(column.DataField).GetValue(item).ToString()).ToString();
                                break;
                            case DataType.Currency:
                                value = Math.Round(double.Parse(typeof(TItem).GetProperty(column.DataField).GetValue(item).ToString()), 2).ToString("c");
                                
                                break;
                                default:
                                break;

                        }
                        @if(column.Alignment != Alignment.NotSet)
                    {
                        <td align="@column.Alignment.ToString().ToLower()">@value</td>

                    }
                    else
                    {
                        <td>@value</td>

                        }
                    }
                    else
                    {
                        @if(column.Alignment != Alignment.NotSet)
                        {
                            <td align="@column.Alignment.ToString().ToLower()">@typeof(TItem).GetProperty(column.DataField).GetValue(item)</td>
                        }
                        else
                        {
                            <td>@typeof(TItem).GetProperty(column.DataField).GetValue(item)</td>
                        }
                    }

                
                    
                }
                
            </tr>
        }
        
    </tbody>

</table>
<div class="level">
    <div class="level-right">
        <div class="level-item">
            @if(Paging != null && Paging.Enabled)
            {
                @if (Paging.CustomPager)
                {
                    @CustomPager
                }
                else
                {
                    <button class="button" @onclick="GoToPrevPage">Prev</button>
                    <span>&nbsp;&nbsp;Page @CurrentPageNumber of @Paging.MaxPageNumber(DataItems.Count)&nbsp;&nbsp;</span>
                    <button class="button" @onclick="GoToNextPage">Next</button>

                }
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int CurrentPageNumber { get; set; } = 1;

    [Parameter]
    public List<TItem> DataItems { get; set; }

    [Parameter]
    public List<ColumnDefinition> Columns { get; set; }
    /// <summary>
    /// test test test
    /// </summary>
    [Parameter]
    public PagingConfig Paging { get; set; }
    /// <summary>
    /// gør noget sejt
    /// </summary>
    [Parameter]
    public RenderFragment CustomPager { get; set; }

    public void GoToPrevPage()
    {
        CurrentPageNumber = Paging.PrevPageNumber(CurrentPageNumber);
    }

    public void GoToNextPage()
    {
        CurrentPageNumber = Paging.NextPageNumber(CurrentPageNumber, DataItems.Count);
    }
}
