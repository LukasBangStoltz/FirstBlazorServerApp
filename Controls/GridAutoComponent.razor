@typeparam TItem


@using System.Reflection

@if (memberinfo != null && memberinfo.Length > 0)
{
    <table class="@($"table {this.CSSClass}")">
        <thead>
            <tr>
                @foreach(var member in memberinfo)
                {
                    @if(member.MemberType == MemberTypes.Property &&
                    !ColumnsToExcludeCSV.Contains(member.Name, StringComparison.OrdinalIgnoreCase))
                    {
                        <th>
                            @member.Name
                        </th>
                    }
                }
            </tr>
        </thead>
        <tbody>
            @foreach(var item in this.Items)
            {
                <tr>
                    @foreach (var member in memberinfo)
                    {
                        @if(member.MemberType == MemberTypes.Property &&
                    !ColumnsToExcludeCSV.Contains(member.Name, StringComparison.OrdinalIgnoreCase))
                        {
                            <td>
                                @item.GetType().GetProperty(member.Name).GetValue(item)
                            </td>
                        }
                    }
                </tr>
            }
        </tbody>
    </table>
}


@code {
    MemberInfo[] memberinfo;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if(Items != null && Items.Count > 0)
        {
            Type typeofItem = this.Items[0].GetType();
            memberinfo = typeofItem.GetMembers();
        }
    }


    [Parameter]
    public List<TItem> Items { get; set; }

    [Parameter]
    public string ColumnsToExcludeCSV { get; set; }

    [Parameter]
    public string CSSClass { get; set; }
}
